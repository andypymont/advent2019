QUnit.test('ascii_program()', function(assert) {
  const cases = [
    {
      input: [
        104, 104, 104, 101, 104, 108, 104, 108, 104, 111, 104, 32, 104, 119,
        104, 111, 104, 114, 104, 108, 104, 100, 99
      ].join(','),
      expected: 'hello world',
    },
    {
      input: [
        104, 46, 104, 46, 104, 35, 104, 46, 104, 46, 104, 46, 104, 46, 104, 46,
        104, 46, 104, 46, 104, 46, 104, 46, 104, 46, 104, 10, 104, 46, 104, 46,
        104, 35, 104, 46, 104, 46, 104, 46, 104, 46, 104, 46, 104, 46, 104, 46,
        104, 46, 104, 46, 104, 46, 104, 10, 104, 35, 104, 35, 104, 35, 104, 35,
        104, 35, 104, 35, 104, 35, 104, 46, 104, 46, 104, 46, 104, 35, 104, 35,
        104, 35, 104, 10, 104, 35, 104, 46, 104, 35, 104, 46, 104, 46, 104, 46,
        104, 35, 104, 46, 104, 46, 104, 46, 104, 35, 104, 46, 104, 35, 104, 10,
        104, 35, 104, 35, 104, 35, 104, 35, 104, 35, 104, 35, 104, 35, 104, 35,
        104, 35, 104, 35, 104, 35, 104, 35, 104, 35, 104, 10, 104, 46, 104, 46,
        104, 35, 104, 46, 104, 46, 104, 46, 104, 35, 104, 46, 104, 46, 104, 46,
        104, 35, 104, 46, 104, 46, 104, 10, 104, 46, 104, 46, 104, 35, 104, 35,
        104, 35, 104, 35, 104, 35, 104, 46, 104, 46, 104, 46, 104, 94, 104, 46,
        104, 46, 99
      ].join(','),
      expected: '..#..........\n..#..........\n#######...###\n#.#...#...#.#\n' +
                '#############\n..#...#...#..\n..#####...^..',
    }
  ]
  cases.forEach(function({ input, expected }) {
    assert.equal(
      ascii_program(read_program(input)),
      expected,
      'ascii_program(read_program(...)) === "' + expected + '"',
    )
  })
})

QUnit.test('ascii_program() robot waking and input', function(assert) {
  const program = read_program([
    99, 1, 1, 0, 109, 28, 203, 0, 101, -1, 27, 27, 109, 1, 1005, 27, 6, 109,
    -42, 204, 0, 109, 1, 1205, 0, 19, 99, 42,
  ].join(','))
  const routines = [
    ['R', 4, 'R', 4, 'R', 8],
    ['R', 8, 'R', 8],
    ['L', 6, 'L', 2],
    ['B', 'A', 'C', 'A', 'B', 'C'],
  ]

  assert.equal(
    ascii_program(program),
    '',
    'No input provided: program provides no output',
  )
  assert.equal(
    ascii_program(program, routines),
    10,
    'Input provided: provided input is copied & returned - last char is a 10',
  )
})

const example_maps = [
  new Map([
    ['0,0', '.'], ['1,0', '.'], ['2,0', '#'], ['3,0', '.'], ['4,0', '.'],
    ['5,0', '.'], ['6,0', '.'], ['7,0', '.'], ['8,0', '.'], ['9,0', '.'],
    ['10,0', '.'], ['11,0', '.'], ['12,0', '.'], ['0,1', '.'], ['1,1', '.'],
    ['2,1', '#'], ['3,1', '.'], ['4,1', '.'], ['5,1', '.'], ['6,1', '.'],
    ['7,1', '.'], ['8,1', '.'], ['9,1', '.'], ['10,1', '.'], ['11,1', '.'],
    ['12,1', '.'], ['0,2', '#'], ['1,2', '#'], ['2,2', '#'], ['3,2', '#'],
    ['4,2', '#'], ['5,2', '#'], ['6,2', '#'], ['7,2', '.'], ['8,2', '.'],
    ['9,2', '.'], ['10,2', '#'], ['11,2', '#'], ['12,2', '#'], ['0,3', '#'],
    ['1,3', '.'], ['2,3', '#'], ['3,3', '.'], ['4,3', '.'], ['5,3', '.'],
    ['6,3', '#'], ['7,3', '.'], ['8,3', '.'], ['9,3', '.'], ['10,3', '#'],
    ['11,3', '.'], ['12,3', '#'], ['0,4', '#'], ['1,4', '#'], ['2,4', '#'],
    ['3,4', '#'], ['4,4', '#'], ['5,4', '#'], ['6,4', '#'], ['7,4', '#'],
    ['8,4', '#'], ['9,4', '#'], ['10,4', '#'], ['11,4', '#'], ['12,4', '#'],
    ['0,5', '.'], ['1,5', '.'], ['2,5', '#'], ['3,5', '.'], ['4,5', '.'],
    ['5,5', '.'], ['6,5', '#'], ['7,5', '.'], ['8,5', '.'], ['9,5', '.'],
    ['10,5', '#'], ['11,5', '.'], ['12,5', '.'], ['0,6', '.'], ['1,6', '.'],
    ['2,6', '#'], ['3,6', '#'], ['4,6', '#'], ['5,6', '#'], ['6,6', '#'],
    ['7,6', '.'],['8,6', '.'], ['9,6', '.'], ['10,6', '^'], ['11,6', '.'],
    ['12,6', '.'],
  ]),
  new Map([
    ['0,0', '#'], ['1,0', '#'], ['2,0', '#'], ['3,0', '#'], ['4,0', '#'],
    ['5,0', '#'], ['6,0', '#'], ['7,0', '.'], ['8,0', '.'], ['9,0', '.'],
    ['10,0', '#'], ['11,0', '#'], ['12,0', '#'], ['13,0', '#'], ['14,0', '#'],
    ['0,1', '#'], ['1,1', '.'], ['2,1', '.'], ['3,1', '.'], ['4,1', '.'],
    ['5,1', '.'], ['6,1', '#'], ['7,1', '.'], ['8,1', '.'], ['9,1', '.'],
    ['10,1', '#'], ['11,1', '.'], ['12,1', '.'], ['13,1', '.'], ['14,1', '#'],
    ['0,2', '#'], ['1,2', '.'], ['2,2', '.'], ['3,2', '.'], ['4,2', '.'],
    ['5,2', '.'], ['6,2', '#'], ['7,2', '.'], ['8,2', '.'], ['9,2', '.'],
    ['10,2', '#'], ['11,2', '.'], ['12,2', '.'], ['13,2', '.'], ['14,2', '#'],
    ['0,3', '.'], ['1,3', '.'], ['2,3', '.'], ['3,3', '.'], ['4,3', '.'],
    ['5,3', '.'], ['6,3', '#'], ['7,3', '.'], ['8,3', '.'], ['9,3', '.'],
    ['10,3', '#'], ['11,3', '.'], ['12,3', '.'], ['13,3', '.'], ['14,3', '#'],
    ['0,4', '.'], ['1,4', '.'], ['2,4', '.'], ['3,4', '.'], ['4,4', '.'],
    ['5,4', '.'],['6,4', '#'], ['7,4', '.'], ['8,4', '.'], ['9,4', '.'],
    ['10,4', '#'], ['11,4', '#'], ['12,4', '#'], ['13,4', '.'], ['14,4', '#'],
    ['0,5', '.'], ['1,5', '.'], ['2,5', '.'], ['3,5', '.'], ['4,5', '.'],
    ['5,5', '.'], ['6,5', '#'], ['7,5', '.'], ['8,5', '.'], ['9,5', '.'],
    ['10,5', '.'], ['11,5', '.'], ['12,5', '#'], ['13,5', '.'], ['14,5', '#'],
    ['0,6', '^'], ['1,6', '#'], ['2,6', '#'], ['3,6', '#'], ['4,6', '#'],
    ['5,6', '#'], ['6,6', '#'], ['7,6', '#'], ['8,6', '#'], ['9,6', '.'],
    ['10,6', '.'], ['11,6', '.'], ['12,6', '#'], ['13,6', '.'], ['14,6', '#'],
    ['0,7', '.'], ['1,7', '.'], ['2,7', '.'], ['3,7', '.'], ['4,7', '.'],
    ['5,7', '.'], ['6,7', '#'], ['7,7', '.'], ['8,7', '#'], ['9,7', '.'],
    ['10,7', '.'], ['11,7', '.'], ['12,7', '#'], ['13,7', '.'], ['14,7', '#'],
    ['0,8', '.'], ['1,8', '.'], ['2,8', '.'], ['3,8', '.'], ['4,8', '.'],
    ['5,8', '.'], ['6,8', '#'], ['7,8', '#'], ['8,8', '#'], ['9,8', '#'],
    ['10,8', '#'], ['11,8', '#'], ['12,8', '#'], ['13,8', '#'], ['14,8', '#'],
    ['0,9', '.'],['1,9', '.'], ['2,9', '.'], ['3,9', '.'], ['4,9', '.'],
    ['5,9', '.'], ['6,9', '.'], ['7,9', '.'], ['8,9', '#'], ['9,9', '.'],
    ['10,9', '.'], ['11,9', '.'], ['12,9', '#'], ['13,9', '.'], ['14,9', '.'],
    ['0,10', '.'], ['1,10', '.'], ['2,10', '.'], ['3,10', '.'], ['4,10', '#'],
    ['5,10', '#'], ['6,10', '#'], ['7,10', '#'],['8,10', '#'], ['9,10', '#'],
    ['10,10', '#'], ['11,10', '#'],['12,10', '#'],['13,10', '.'],
    ['14,10', '.'], ['0,11', '.'], ['1,11', '.'], ['2,11', '.'], ['3,11', '.'],
    ['4,11', '#'], ['5,11', '.'], ['6,11', '.'], ['7,11', '.'], ['8,11', '#'],
    ['9,11', '.'], ['10,11', '.'], ['11,11', '.'], ['12,11', '.'],
    ['13,11', '.'], ['14,11', '.'], ['0,12', '.'], ['1,12', '.'], ['2,12', '.'],
    ['3,12', '.'], ['4,12', '#'],['5,12', '.'],['6,12', '.'], ['7,12', '.'],
    ['8,12', '#'], ['9,12', '.'], ['10,12', '.'], ['11,12', '.'],
    ['12,12', '.'], ['13,12', '.'], ['14,12', '.'], ['0,13', '.'],
    ['1,13', '.'], ['2,13', '.'], ['3,13', '.'], ['4,13', '#'], ['5,13', '.'],
    ['6,13', '.'], ['7,13', '.'], ['8,13', '#'], ['9,13', '.'], ['10,13', '.'],
    ['11,13', '.'], ['12,13', '.'], ['13,13', '.'], ['14,13', '.'],
    ['0,14', '.'], ['1,14', '.'], ['2,14', '.'], ['3,14', '.'], ['4,14', '#'],
    ['5,14', '#'], ['6,14', '#'],['7,14', '#'], ['8,14', '#'], ['9,14', '.'],
    ['10,14', '.'], ['11,14', '.'], ['12,14', '.'], ['13,14', '.'],
    ['14,14', '.']
  ])
]

QUnit.test('read_map(output)', function(assert) {
  const cases = [
    {
      input: [
        '..#..........',
        '..#..........',
        '#######...###',
        '#.#...#...#.#',
        '#############',
        '..#...#...#..',
        '..#####...^..',
      ].join('\n'),
      expected: example_maps[0],
      desc: 'Part 1 example map',
    },
    {
      input: [
        '#######...#####',
        '#.....#...#...#',
        '#.....#...#...#',
        '......#...#...#',
        '......#...###.#',
        '......#.....#.#',
        '^########...#.#',
        '......#.#...#.#',
        '......#########',
        '........#...#..',
        '....#########..',
        '....#...#......',
        '....#...#......',
        '....#...#......',
        '....#####......',
      ].join('\n'),
      expected: example_maps[1],
      desc: 'Part 2 example map',
    }
  ]
  cases.forEach(function({ input, expected, desc }) {
    assert.deepEqual(read_map(input), expected, desc)
  })
})

QUnit.test('map_info(map)', function(assert) {
  const cases = [
    {
      input: example_maps[0],
      expected: {
        robot: [10, 6, 'N'],
        end: [2, 0],
        intersections: new Set([
          '2,2', '2,4', '6,4', '10,4',
        ]),
        locations: 39,
      },
      desc: 'Part 1 example map'
    },
    {
      input: example_maps[1],
      expected: {
        robot: [0, 6, 'N'],
        end: [0, 2],
        intersections: new Set([
          '6,6', '8,8', '12,8', '8,10',
        ]),
        locations: 77,
      },
      desc: 'Part 2 example map'
    }
  ]
  cases.forEach(function({ input, expected, desc }) {
    assert.deepEqual(map_info(input), expected, desc)
  })
})

QUnit.test('route(map, mapinfo)', function(assert) {
  const cases = [
    {
      map: example_maps[0],
      mapinfo: {
        robot: [10, 6, 'N'],
        end: [2, 0],
        intersections: new Set([
          '2,2', '2,4', '6,4', '10,4',
        ]),
        locations: 39,
      },
      expected: [4, 'R', 2, 'R', 2, 'R', 12, 'R', 2, 'R', 6, 'R', 4, 'R', 4,
                 'R', 6],
      desc: 'Part 1 example map',
    },
    {
      map: example_maps[1],
      mapinfo: {
        robot: [0, 6, 'N'],
        intersections: new Set([
          '6,6', '8,8', '12,8', '8,10',
        ]),
        end: [0, 2],
        locations: 77,
      },
      expected: ['R', 8, 'R', 8, 'R', 4, 'R', 4, 'R', 8, 'L', 6, 'L', 2, 'R', 4,
                 'R', 4, 'R', 8, 'R', 8, 'R', 8, 'L', 6, 'L', 2],
      desc: 'Part 2 example map',
    }
  ]
  cases.forEach(function({ map, mapinfo, expected, desc }) {
    assert.deepEqual(route(map, mapinfo), expected, desc)
  })
})

QUnit.test('substitute(sequence, part, replacement)', function(assert) {
  const cases = [
    {
      sequence: ['R', 8, 'R', 8, 'R', 4, 'R', 4, 'R', 8, 'L', 6, 'L', 2, 'R', 4,
                 'R', 4, 'R', 8, 'R', 8, 'R', 8, 'L', 6, 'L', 2],
      part: ['R', 8, 'R', 8],
      replacement: ['A'],
      expected: ['A', 'R', 4, 'R', 4, 'R', 8, 'L', 6, 'L', 2, 'R', 4, 'R', 4,
                 'A', 'R', 8, 'L', 6, 'L', 2],
    },
    {
      sequence: ['R', 8, 'R', 8, 'R', 4, 'R', 4, 'R', 8, 'L', 6, 'L', 2, 'R', 4,
                 'R', 4, 'R', 8, 'R', 8, 'R', 8, 'L', 6, 'L', 2],
      part: ['L', 6, 'L', 2],
      replacement: ['B'],
      expected: ['R', 8, 'R', 8, 'R', 4, 'R', 4, 'R', 8, 'B', 'R', 4, 'R', 4,
                 'R', 8, 'R', 8, 'R', 8, 'B'],
    },
    {
      sequence: [4, 'R', 2, 'R', 2, 'R', 12, 'R', 2, 'R', 6, 'R', 4, 'R', 4,
                 'R', 6],
      part: ['R', 4],
      replacement: ['C'],
      expected: [4, 'R', 2, 'R', 2, 'R', 12, 'R', 2, 'R', 6, 'C', 'C', 'R', 6],
    },
    {
      sequence: [4, 'R', 2, 'R', 2, 'R', 12, 'R', 2, 'R', 6, 'R', 4, 'R', 4,
                 'R', 6],
      part: ['L', 6, 'L', 2],
      replacement: ['D'],
      expected: [4, 'R', 2, 'R', 2, 'R', 12, 'R', 2, 'R', 6, 'R', 4, 'R', 4,
                 'R', 6],
    }
  ]
  cases.forEach(function({ sequence, part, replacement, expected }) {
    assert.deepEqual(
      substitute(sequence, part, replacement),
      expected,
      'substitute(seq, part, ["' + replacement[0] + '"])'
    )
  })
})

QUnit.test('find_repeating_subarrays(arr, length)', function(assert) {
  const cases = [
    {
      arr: ['A', 'B', 'C', 'D', 'E', 'E', 'E', 'E'],
      length: 2,
      expected: [['E', 'E']],
    },
    {
      arr: ['A', 'B', 'C', 'A', 'B', 'C'],
      length: 3,
      expected: [['A', 'B', 'C']],
    },
    {
      arr: [1, 2, 3, 1, 2, 3, 1, 2, 3, 4, 5, 6, 4, 5, 6],
      length: 3,
      expected: [[1, 2, 3], [2, 3, 1], [3, 1, 2], [4, 5, 6]],
    }
  ]
  cases.forEach(function({ arr, length, expected }) {
    const desc = [
      'find_repeating_subarrays([',
      arr.join(', '),
      '], ',
      length,
      ')'
    ].join('')
    assert.deepEqual(
      find_repeating_subarrays(arr, length),
      expected,
      desc
    )
  })
})

QUnit.test('compress_route(route)', function(assert) {
  const cases = [
    {
      input: ['R', 8, 'R', 8, 'R', 4, 'R', 4, 'R', 8, 'L', 6, 'L', 2, 'R', 4,
              'R', 4, 'R', 8, 'R', 8, 'R', 8, 'L', 6, 'L', 2],
      expected: [
        ['R', 4, 'R', 4, 'R', 8],
        ['R', 8, 'R', 8],
        ['L', 6, 'L', 2],
        ['B', 'A', 'C', 'A', 'B', 'C'],
      ]
    }
  ]
  cases.forEach(function({ input, expected }) {
    assert.deepEqual(
      compress_route(input),
      expected,
      'compress_route("' + input + '")'
    )
  })
})

QUnit.test('alignment_parameter(intersection)', function(assert) {
  const cases = [
    ['2,2', 4],
    ['13,4', 52],
    ['2,4', 8],
    ['4,6', 24],
    ['5,5', 25],
    ['1,21', 21],
    ['4,10', 40],
  ]
  cases.forEach(function([input, expected]) {
    assert.equal(
      alignment_parameter(input),
      expected,
      'alignment_parameter("' + input + '") === ' + expected
    )
  })
})

QUnit.test('Solutions', async function(assert) {
  const program = await fetch_puzzle_input().then(read_program)
  const map = read_map(ascii_program(program))
  const mapinfo = map_info(map)

  assert.equal(
    Array.from(mapinfo.intersections)
         .map(alignment_parameter)
         .reduce((a, b) => a + b),
    6212,
    'Part 1: total of alignment parameters for intersections = 6212',
  )

  const routines = compress_route(route(map, mapinfo))
  assert.equal(
    ascii_program(program, routines),
    1016741,
    'Part 2: output from running optimised routines = '
  )
})
