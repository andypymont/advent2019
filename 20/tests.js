const example_maps = [
  [
    '         A           ',
    '         A           ',
    '  #######.#########  ',
    '  #######.........#  ',
    '  #######.#######.#  ',
    '  #######.#######.#  ',
    '  #######.#######.#  ',
    '  #####  B    ###.#  ',
    'BC...##  C    ###.#  ',
    '  ##.##       ###.#  ',
    '  ##...DE  F  ###.#  ',
    '  #####    G  ###.#  ',
    '  #########.#####.#  ',
    'DE..#######...###.#  ',
    '  #.#########.###.#  ',
    'FG..#########.....#  ',
    '  ###########.#####  ',
    '             Z       ',
    '             Z       ',
  ],
  [
    '                   A               ',
    '                   A               ',
    '  #################.#############  ',
    '  #.#...#...................#.#.#  ',
    '  #.#.#.###.###.###.#########.#.#  ',
    '  #.#.#.......#...#.....#.#.#...#  ',
    '  #.#########.###.#####.#.#.###.#  ',
    '  #.............#.#.....#.......#  ',
    '  ###.###########.###.#####.#.#.#  ',
    '  #.....#        A   C    #.#.#.#  ',
    '  #######        S   P    #####.#  ',
    '  #.#...#                 #......VT',
    '  #.#.#.#                 #.#####  ',
    '  #...#.#               YN....#.#  ',
    '  #.###.#                 #####.#  ',
    'DI....#.#                 #.....#  ',
    '  #####.#                 #.###.#  ',
    'ZZ......#               QG....#..AS',
    '  ###.###                 #######  ',
    'JO..#.#.#                 #.....#  ',
    '  #.#.#.#                 ###.#.#  ',
    '  #...#..DI             BU....#..LF',
    '  #####.#                 #.#####  ',
    'YN......#               VT..#....QG',
    '  #.###.#                 #.###.#  ',
    '  #.#...#                 #.....#  ',
    '  ###.###    J L     J    #.#.###  ',
    '  #.....#    O F     P    #.#...#  ',
    '  #.###.#####.#.#####.#####.###.#  ',
    '  #...#.#.#...#.....#.....#.#...#  ',
    '  #.#####.###.###.#.#.#########.#  ',
    '  #...#.#.....#...#.#.#.#.....#.#  ',
    '  #.###.#####.###.###.#.#.#######  ',
    '  #.#.........#...#.............#  ',
    '  #########.###.###.#############  ',
    '           B   J   C               ',
    '           U   P   P               ',
  ],
  [
    '             Z L X W       C                 ',
    '             Z P Q B       K                 ',
    '  ###########.#.#.#.#######.###############  ',
    '  #...#.......#.#.......#.#.......#.#.#...#  ',
    '  ###.#.#.#.#.#.#.#.###.#.#.#######.#.#.###  ',
    '  #.#...#.#.#...#.#.#...#...#...#.#.......#  ',
    '  #.###.#######.###.###.#.###.###.#.#######  ',
    '  #...#.......#.#...#...#.............#...#  ',
    '  #.#########.#######.#.#######.#######.###  ',
    '  #...#.#    F       R I       Z    #.#.#.#  ',
    '  #.###.#    D       E C       H    #.#.#.#  ',
    '  #.#...#                           #...#.#  ',
    '  #.###.#                           #.###.#  ',
    '  #.#....OA                       WB..#.#..ZH',
    '  #.###.#                           #.#.#.#  ',
    'CJ......#                           #.....#  ',
    '  #######                           #######  ',
    '  #.#....CK                         #......IC',
    '  #.###.#                           #.###.#  ',
    '  #.....#                           #...#.#  ',
    '  ###.###                           #.#.#.#  ',
    'XF....#.#                         RF..#.#.#  ',
    '  #####.#                           #######  ',
    '  #......CJ                       NM..#...#  ',
    '  ###.#.#                           #.###.#  ',
    'RE....#.#                           #......RF',
    '  ###.###        X   X       L      #.#.#.#  ',
    '  #.....#        F   Q       P      #.#.#.#  ',
    '  ###.###########.###.#######.#########.###  ',
    '  #.....#...#.....#.......#...#.....#.#...#  ',
    '  #####.#.###.#######.#######.###.###.#.#.#  ',
    '  #.......#.......#.#.#.#.#...#...#...#.#.#  ',
    '  #####.###.#####.#.#.#.#.###.###.#.###.###  ',
    '  #.......#.....#.#...#...............#...#  ',
    '  #############.#.#.###.###################  ',
    '               A O F   N                     ',
    '               A A D   M                     ',
  ]
]

const example_map_info = {
  adjacency: new Map([
    ['9,2', new Set(['9,3'])],
    ['9,3', new Set(['9,2', '10,3', '9,4'])],
    ['10,3', new Set(['9,3', '11,3'])],
    ['11,3', new Set(['10,3', '12,3'])],
    ['12,3', new Set(['11,3', '13,3'])],
    ['13,3', new Set(['12,3', '14,3'])],
    ['14,3', new Set(['13,3', '15,3'])],
    ['15,3', new Set(['14,3', '16,3'])],
    ['16,3', new Set(['15,3', '17,3'])],
    ['17,3', new Set(['16,3', '17,4'])],
    ['9,4', new Set(['9,3', '9,5'])],
    ['17,4', new Set(['17,3', '17,5'])],
    ['9,5', new Set(['9,4', '9,6'])],
    ['17,5', new Set(['17,4', '17,6'])],
    ['9,6', new Set(['9,5'])],
    ['17,6', new Set(['17,5', '17,7'])],
    ['17,7', new Set(['17,6', '17,8'])],
    ['2,8', new Set(['3,8'])],
    ['3,8', new Set(['2,8', '4,8'])],
    ['4,8', new Set(['3,8', '4,9'])],
    ['17,8', new Set(['17,7', '17,9'])],
    ['4,9', new Set(['4,8', '4,10'])],
    ['17,9', new Set(['17,8', '17,10'])],
    ['4,10', new Set(['4,9', '5,10'])],
    ['5,10', new Set(['4,10', '6,10'])],
    ['6,10', new Set(['5,10'])],
    ['17,10', new Set(['17,9', '17,11'])],
    ['17,11', new Set(['17,10', '17,12'])],
    ['11,12', new Set(['11,13'])],
    ['17,12', new Set(['17,11', '17,13'])],
    ['2,13', new Set(['3,13'])],
    ['3,13', new Set(['2,13', '3,14'])],
    ['11,13', new Set(['11,12', '12,13'])],
    ['12,13', new Set(['11,13', '13,13'])],
    ['13,13', new Set(['12,13', '13,14'])],
    ['17,13', new Set(['17,12', '17,14'])],
    ['3,14', new Set(['3,13', '3,15'])],
    ['13,14', new Set(['13,13', '13,15'])],
    ['17,14', new Set(['17,13', '17,15'])],
    ['2,15', new Set(['3,15'])],
    ['3,15', new Set(['3,14', '2,15'])],
    ['13,15', new Set(['13,14', '14,15', '13,16'])],
    ['14,15', new Set(['13,15', '15,15'])],
    ['15,15', new Set(['14,15', '16,15'])],
    ['16,15', new Set(['15,15', '17,15'])],
    ['17,15', new Set(['16,15', '17,14'])],
    ['13,16', new Set(['13,15'])]
  ]),
  gates: new Map([
    ['AA', new Set(['9,2'])],
    ['BC', new Set(['2,8', '9,6'])],
    ['DE', new Set(['6,10', '2,13'])],
    ['FG', new Set(['2,15', '11,12'])],
    ['ZZ', new Set(['13,16'])],
  ]),
  outside: {
    x: [2, 17],
    y: [2, 16],
  }
}

QUnit.test('read_map(input)', function(assert) {
  assert.deepEqual(
    read_map(example_maps[0]),
    example_map_info,
    'First example from part 1',
  )
})

QUnit.test('shortest_a_to_z(mapinfo)', function(assert) {
  const cases = [
    {
      input: example_map_info,
      expected: 23,
      desc: 'First example from puzzle description === 23',
    },
    {
      input: read_map(example_maps[1]),
      expected: 58,
      desc: 'Second example from puzzle description === 58',
    },
    {
        input: {
          connections: new Map([
          ]),
          gates: new Map([
          ]),
        },
      expected: -1,
      desc: 'Example with insufficient info === -1',
    },
  ]
  cases.forEach(function({ input, expected, desc }) {
    assert.equal(
      shortest_a_to_z(input),
      expected,
      desc
    )
  })
})

QUnit.test('shortest_a_to_z(mapinfo, true)', function(assert) {
  const cases = [
    {
      mapinfo: example_map_info,
      expected: 26,
      desc: 'First example: shortest route in recursive maze is 27',
    },
    {
      mapinfo: read_map(example_maps[2]),
      expected: 396,
      desc: 'Third example: shortest route in recursive maze is 396',
    }
  ]
  cases.forEach(function({ mapinfo, expected, desc }) {
    assert.equal(
      shortest_a_to_z(mapinfo, true),
      expected,
      desc
    )
  })
})

QUnit.test('Solutions', async function(assert) {
  const map = await fetch_puzzle_input_lines().then(read_map)

  assert.equal(
    shortest_a_to_z(map),
    490,
    'Part 1: shortest route from AA to ZZ === 490',
  )
  assert.equal(
    shortest_a_to_z(map, true),
    5648,
    'Part 2: shortest route from AA to ZZ in recursive maze === 5648',
  )
})
